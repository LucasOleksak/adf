{
	"name": "SortAndAnalyzeTrend",
	"properties": {
		"folder": {
			"name": "Wines"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "DataLake",
						"type": "LinkedServiceReference"
					},
					"name": "TrendCSVFile"
				},
				{
					"dataset": {
						"referenceName": "SystembolagetStores",
						"type": "DatasetReference"
					},
					"name": "SystembolagetStores"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "DataLake",
						"type": "LinkedServiceReference"
					},
					"name": "Sink",
					"rejectedDataLinkedService": {
						"referenceName": "DataLake",
						"type": "LinkedServiceReference"
					}
				},
				{
					"linkedService": {
						"referenceName": "DataLake",
						"type": "LinkedServiceReference"
					},
					"name": "sink13333"
				}
			],
			"transformations": [
				{
					"name": "SortTrends"
				},
				{
					"name": "JoinStoresWithSortedTrends"
				},
				{
					"name": "RemoveSomeField"
				},
				{
					"name": "SortFromWorseTrendToBest"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "sort1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "cast1"
				},
				{
					"name": "sort2"
				}
			],
			"scriptLines": [
				"parameters{",
				"     item as string ('Dopff'),",
				"     workspace as string ('validwines')",
				"}",
				"source(output(",
				"          ID as short,",
				"          Wine as string,",
				"          Trend as double '000,000,000.000',",
				"          Diff_4_weeks as double '000,000,000.000',",
				"          Median as double '000,000,000.000',",
				"          Variance as double '000,000,000.000'",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: ($workspace),",
				"     folderPath: (concat(\"trends/\", $item)),",
				"     fileName: (concat($item, \"-\", toString(currentDate(\"yyyy-mm-dd\")), \".csv\")),",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     partitionBy('hash', 1)) ~> TrendCSVFile",
				"source(output(",
				"          ID as short,",
				"          Butiksnamn as string,",
				"          Adress as string,",
				"          Postnummer as string,",
				"          Ort as string,",
				"          Lat as double,",
				"          Lng as double,",
				"          Range as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SystembolagetStores",
				"derivedColumn3 sort(asc(Trend, true),",
				"     partitionBy('hash', 1)) ~> SortTrends",
				"SortTrends, SystembolagetStores join(TrendCSVFile@ID == SystembolagetStores@ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     partitionBy('hash', 1),",
				"     broadcast: 'auto')~> JoinStoresWithSortedTrends",
				"JoinStoresWithSortedTrends select(mapColumn(",
				"          ID = TrendCSVFile@ID,",
				"          Wine,",
				"          Trend,",
				"          Diff_4_weeks,",
				"          Median,",
				"          Butiksnamn,",
				"          Adress,",
				"          Postnummer,",
				"          Ort,",
				"          Lat,",
				"          Lng,",
				"          Range",
				"     ),",
				"     partitionBy('hash', 1),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveSomeField",
				"RemoveSomeField sort(asc(Diff_4_weeks, true),",
				"     partitionBy('hash', 1)) ~> SortFromWorseTrendToBest",
				"SortFromWorseTrendToBest derive(TrendFactor = toFloat(Diff_4_weeks)*toFloat(Trend),",
				"     partitionBy('hash', 1)) ~> derivedColumn1",
				"derivedColumn1 sort(desc(TrendFactor, true),",
				"     partitionBy('hash', 1)) ~> sort1",
				"sort1 derive(current_date = currentDate(),",
				"          trendString = toString(TrendFactor),",
				"     partitionBy('hash', 1)) ~> derivedColumn2",
				"derivedColumn2 keyGenerate(output(newID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"TrendCSVFile derive(TrendFactor = toFloat(Trend)*toFloat(Diff_4_weeks)) ~> derivedColumn3",
				"sort2 cast(output(",
				"          ID as string,",
				"          Wine as string,",
				"          Trend as string,",
				"          Diff_4_weeks as string,",
				"          Median as string,",
				"          Variance as string,",
				"          TrendFactor as string",
				"     ),",
				"     errors: false) ~> cast1",
				"derivedColumn3 sort(asc(TrendFactor, true),",
				"     partitionBy('hash', 1)) ~> sort2",
				"sort1 sink(allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     input(",
				"          ID as short,",
				"          Wine as string,",
				"          Trend as string,",
				"          Diff_4_weeks as string,",
				"          Median as string,",
				"          Butiksnamn as string,",
				"          Adress as string,",
				"          Postnummer as string,",
				"          Ort as string,",
				"          Lat as double,",
				"          Lng as double,",
				"          Range as string,",
				"          factor as string",
				"     ),",
				"     format: 'delimited',",
				"     fileSystem: 'validwines',",
				"     folderPath: 'reports',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '',",
				"     columnNamesAsHeader: true,",
				"     partitionFileNames:['report.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     quoteAll: true,",
				"     mapColumn(",
				"          ID,",
				"          Wine,",
				"          Butiksnamn,",
				"          Adress,",
				"          Postnummer,",
				"          Ort,",
				"          Lat,",
				"          Lng,",
				"          Range,",
				"          factor = TrendFactor",
				"     ),",
				"     partitionBy('hash', 1)) ~> Sink",
				"cast1 sink(allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     input(",
				"          ID as short,",
				"          Wine as string,",
				"          Butiksnamn as string,",
				"          Adress as string,",
				"          Postnummer as string,",
				"          Ort as string,",
				"          Lat as double,",
				"          Lng as double,",
				"          Range as short,",
				"          factor as double",
				"     ),",
				"     format: 'delimited',",
				"     fileSystem: 'validwines',",
				"     folderPath: 'reports',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: false,",
				"     partitionFileNames:['report1.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     partitionBy('hash', 1)) ~> sink13333"
			]
		}
	}
}