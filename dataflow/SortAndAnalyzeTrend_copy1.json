{
	"name": "SortAndAnalyzeTrend_copy1",
	"properties": {
		"folder": {
			"name": "Wines"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "DataLake",
						"type": "LinkedServiceReference"
					},
					"name": "TrendCSVFile"
				},
				{
					"dataset": {
						"referenceName": "SystembolagetStores",
						"type": "DatasetReference"
					},
					"name": "SystembolagetStores"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "DataLake",
						"type": "LinkedServiceReference"
					},
					"name": "SaveToCSV"
				}
			],
			"transformations": [
				{
					"name": "CastEverythingToString"
				},
				{
					"name": "CountTrendXDiff"
				},
				{
					"name": "SortByCountFactor"
				},
				{
					"name": "JoinWithSystembolaget"
				},
				{
					"name": "RemoveDoubleIDs"
				},
				{
					"name": "RemoveDoubles"
				},
				{
					"name": "OnlyNegativeTrendsAndDiff"
				},
				{
					"name": "SortByCountDesc"
				},
				{
					"name": "AggByAVG"
				},
				{
					"name": "rank1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     item as string ('Dopff'),",
				"     workspace as string ('validwines')",
				"}",
				"source(output(",
				"          ID as short,",
				"          Wine as string,",
				"          Trend as double,",
				"          Diff_4_weeks as double,",
				"          Median as double,",
				"          Variance as double,",
				"          Segment as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: ($workspace),",
				"     folderPath: (concat(\"trends/\", $item)),",
				"     fileName: (concat($item, \"-\", toString(currentDate(\"yyyy-mm-dd\")), \".csv\")),",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     partitionBy('hash', 1)) ~> TrendCSVFile",
				"source(output(",
				"          ID as short,",
				"          Butiksnamn as string,",
				"          Adress as string,",
				"          Postnummer as string,",
				"          Ort as string,",
				"          Lat as double,",
				"          Lng as double,",
				"          Range as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     partitionBy('hash', 1)) ~> SystembolagetStores",
				"SortByCountFactor cast(output(",
				"          ID as string,",
				"          Wine as string,",
				"          Trend as string,",
				"          Diff_4_weeks as string,",
				"          Median as string,",
				"          Variance as string,",
				"          countFactor as string",
				"     ),",
				"     errors: false) ~> CastEverythingToString",
				"OnlyNegativeTrendsAndDiff derive(countFactor = round(Trend*Diff_4_weeks,2,2),",
				"     partitionBy('hash', 1)) ~> CountTrendXDiff",
				"CountTrendXDiff sort(desc(countFactor, true),",
				"     partitionBy('hash', 1)) ~> SortByCountFactor",
				"TrendCSVFile, SystembolagetStores join(TrendCSVFile@ID == SystembolagetStores@ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     partitionBy('hash', 1),",
				"     broadcast: 'auto')~> JoinWithSystembolaget",
				"JoinWithSystembolaget select(mapColumn(",
				"          ID = TrendCSVFile@ID,",
				"          Wine,",
				"          Trend,",
				"          Diff_4_weeks,",
				"          Median,",
				"          Variance,",
				"          Segment,",
				"          Butiksnamn,",
				"          Adress,",
				"          Postnummer,",
				"          Ort,",
				"          Lat,",
				"          Lng,",
				"          Range",
				"     ),",
				"     partitionBy('hash', 1),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveDoubleIDs",
				"CastEverythingToString aggregate(groupBy(ID),",
				"     each(match(name!='ID'), $$ = first($$)),",
				"     partitionBy('hash', 1)) ~> RemoveDoubles",
				"RemoveDoubleIDs filter(Trend < 0 && Diff_4_weeks < 0) ~> OnlyNegativeTrendsAndDiff",
				"RemoveDoubles sort(desc(countFactor, true),",
				"     partitionBy('hash', 1)) ~> SortByCountDesc",
				"RemoveDoubleIDs aggregate(groupBy(Segment),",
				"     average = round(avg(Median),1,1),",
				"     partitionBy('hash', 1)) ~> AggByAVG",
				"AggByAVG rank(desc(average, true),",
				"     output(rank as long),",
				"     dense: true) ~> rank1",
				"SortByCountDesc sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     fileSystem: ($workspace),",
				"     folderPath: (concat(\"reports/\", $item)),",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     partitionFileNames:[(concat($item, \"-\", toString(currentDate(\"yyyy-mm-dd\")), \".csv\"))],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> SaveToCSV"
			]
		}
	}
}