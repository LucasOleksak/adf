{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "reaktion-data-factory-2"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DataflowForCRM_Trackings')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CharmaCRMRawData",
								"type": "DatasetReference"
							},
							"name": "GetTrackingRawData"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "DataLake",
								"type": "LinkedServiceReference"
							},
							"name": "SaveForCRMPage"
						}
					],
					"transformations": [
						{
							"name": "FilterRemoveReaktionUID"
						}
					],
					"scriptLines": [
						"parameters{",
						"     did as string (\"107\"),",
						"     sitename as string (\"charma\"),",
						"     datatype as string (\"trackings\")",
						"}",
						"source(output(",
						"          createdAt as string,",
						"          updatedAt as string,",
						"          uid as integer,",
						"          url as string,",
						"          client as string,",
						"          domain_id as string,",
						"          referrer_url as string,",
						"          url_without_params as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> GetTrackingRawData",
						"GetTrackingRawData filter(!in([",
						"    287962,",
						"    77602,",
						"    77233,",
						"    278328,",
						"    4,",
						"    1,",
						"    315594,",
						"    315769,",
						"    278594,",
						"    77229,",
						"    77212,",
						"    287409,",
						"    287410,",
						"    287411,",
						"    287412,",
						"    287408,",
						"    287479,",
						"    287457,",
						"    287463,",
						"    287464,",
						"    287474,",
						"    287477,",
						"    287478,",
						"    287481,",
						"    287482,",
						"    287483,",
						"    298466,",
						"    422164,",
						"    1118405",
						"     ], uid),",
						"     partitionBy('hash', 1)) ~> FilterRemoveReaktionUID",
						"FilterRemoveReaktionUID sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'tracking',",
						"     folderPath: 'crm',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[(concat($sitename, '-ready-to-import', '.csv'))],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SaveForCRMPage"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataflowForCRM_Trackings1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CharmaCRMRawData",
								"type": "DatasetReference"
							},
							"name": "CharmaRawDataCSV"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "CRM Charma",
								"type": "LinkedServiceReference"
							},
							"name": "CharmaDataToImport"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     did as string (\"107\"),",
						"     sitename as string (\"charma\"),",
						"     datatype as string (\"redirects\")",
						"}",
						"source(output(",
						"          items as string,",
						"          category as string,",
						"          uid as integer,",
						"          uuid as string,",
						"          ip as string,",
						"          domain_id as short,",
						"          url as string,",
						"          redirect_name as string,",
						"          referrer_url as string,",
						"          {createdAt_$date} as long,",
						"          {updatedAt_$date} as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> CharmaRawDataCSV",
						"CharmaRawDataCSV filter(!in([",
						"    287962,",
						"    77602,",
						"    77233,",
						"    278328,",
						"    4,",
						"    1,",
						"    315594,",
						"    315769,",
						"    278594,",
						"    77229,",
						"    77212,",
						"    287409,",
						"    287410,",
						"    287411,",
						"    287412,",
						"    287408,",
						"    287479,",
						"    287457,",
						"    287463,",
						"    287464,",
						"    287474,",
						"    287477,",
						"    287478,",
						"    287481,",
						"    287482,",
						"    287483,",
						"    298466,",
						"    422164,",
						"    1118405",
						"     ], uid),",
						"     partitionBy('hash', 1)) ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'tracking',",
						"     folderPath: ($datatype),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:[(concat($sitename, '-ready-to-import', '.csv'))],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> CharmaDataToImport"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/EDR_BasicFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "EDR"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EDR_CSV_Source",
								"type": "DatasetReference"
							},
							"name": "getDataFromCSVSource"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "CRM Charma",
								"type": "LinkedServiceReference"
							},
							"name": "saveToRedirectsCSV"
						}
					],
					"transformations": [
						{
							"name": "aggByTag"
						},
						{
							"name": "sortByVisitsDesc"
						}
					],
					"scriptLines": [
						"source(output(",
						"          tag as string,",
						"          category as string,",
						"          created as string,",
						"          updated as string,",
						"          uid as string,",
						"          url as string,",
						"          domain_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> getDataFromCSVSource",
						"getDataFromCSVSource aggregate(groupBy(tag),",
						"     visits = count(tag),",
						"     partitionBy('hash', 1)) ~> aggByTag",
						"aggByTag sort(desc(visits, true)) ~> sortByVisitsDesc",
						"sortByVisitsDesc sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'charmacrm',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:['charma_crm.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     partitionBy('hash', 1)) ~> saveToRedirectsCSV"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/HRNytt_Banners')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "HRNytt"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "HRNytt_Stage_Banners_Clicks",
								"type": "DatasetReference"
							},
							"name": "BannersClicks"
						},
						{
							"dataset": {
								"referenceName": "HRNytt_Stage_Banners",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "HRNytt_Banners_Current_Month",
								"type": "DatasetReference"
							},
							"name": "saveCurrentMonthStats"
						},
						{
							"dataset": {
								"referenceName": "HRNytt_banners_last_3_months",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "HRNytt_Agg_By_Page",
								"type": "DatasetReference"
							},
							"name": "saveCurrentMonthAggByPage"
						}
					],
					"transformations": [
						{
							"name": "aggByDateCurrentMonth"
						},
						{
							"name": "sortByBannerIDandDateCurrentMonth"
						},
						{
							"name": "aMonthAgo"
						},
						{
							"name": "ThreeMonthsAgo"
						},
						{
							"name": "currentMonth"
						},
						{
							"name": "aggByBannerIDandDate2"
						},
						{
							"name": "sort1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join1"
						},
						{
							"name": "aggByPagesCurrentMonth"
						},
						{
							"name": "sortByMostClicked"
						},
						{
							"name": "joinWithBannersTable"
						},
						{
							"name": "sort2"
						}
					],
					"scriptLines": [
						"parameters{",
						"     firstDayOfMonth as date (subDays(currentDate(),dayOfMonth(currentDate())))",
						"}",
						"source(output(",
						"          id as integer,",
						"          url as string,",
						"          full_url as string,",
						"          date as date,",
						"          created as timestamp,",
						"          banner_id as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> BannersClicks",
						"source(output(",
						"          id as integer,",
						"          published as timestamp,",
						"          image as string,",
						"          position as string,",
						"          created as timestamp,",
						"          updated as timestamp,",
						"          code as string,",
						"          order as integer,",
						"          title as string,",
						"          image_url as string,",
						"          code_mobile as string,",
						"          valid_until as timestamp,",
						"          clicks as integer,",
						"          impressions as integer,",
						"          mobile_image as string,",
						"          small_mobile_image as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     partitionBy('hash', 1)) ~> source1",
						"currentMonth aggregate(groupBy(banner_id,",
						"          date),",
						"     cliks = count(banner_id),",
						"     partitionBy('hash', 1)) ~> aggByDateCurrentMonth",
						"aggByDateCurrentMonth sort(desc(banner_id, true),",
						"     desc(date, true),",
						"     partitionBy('hash', 1)) ~> sortByBannerIDandDateCurrentMonth",
						"BannersClicks filter(date >  toDate( subMonths(currentTimestamp(), 1))) ~> aMonthAgo",
						"BannersClicks filter(date >  toDate( subMonths(currentTimestamp(), 3))) ~> ThreeMonthsAgo",
						"BannersClicks filter(date <= lastDayOfMonth((currentDate('Europe/Stockholm'))) && date > subDays(currentDate(), dayOfMonth(currentDate()))) ~> currentMonth",
						"ThreeMonthsAgo aggregate(groupBy(banner_id,",
						"          date),",
						"     clicks = count(banner_id),",
						"     partitionBy('hash', 1)) ~> aggByBannerIDandDate2",
						"aggByBannerIDandDate2 sort(desc(banner_id, true),",
						"     desc(date, true),",
						"     partitionBy('hash', 1)) ~> sort1",
						"source1 select(mapColumn(",
						"          id,",
						"          published,",
						"          position,",
						"          title,",
						"          valid_until,",
						"          impressions",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"sortByBannerIDandDateCurrentMonth, select1 join(banner_id == id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> join1",
						"currentMonth aggregate(groupBy(url,",
						"          banner_id),",
						"     clicks = count(banner_id),",
						"     partitionBy('hash', 1)) ~> aggByPagesCurrentMonth",
						"aggByPagesCurrentMonth sort(desc(clicks, true),",
						"     partitionBy('hash', 1)) ~> sortByMostClicked",
						"sortByMostClicked, select1 join(banner_id == id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinWithBannersTable",
						"joinWithBannersTable sort(desc(clicks, true),",
						"     partitionBy('hash', 1)) ~> sort2",
						"join1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:[(concat('banners-current-month', toString(month(currentUTC())),'-', toString(year(currentUTC())), '.csv'))],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          date,",
						"          cliks,",
						"          title",
						"     ),",
						"     partitionBy('hash', 1)) ~> saveCurrentMonthStats",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string",
						"     ),",
						"     partitionFileNames:[(concat('banners-last-3-months','.csv'))],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"sort2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string",
						"     ),",
						"     partitionFileNames:[(concat('banners-by-page-current-month', toString(month(currentUTC())),'-', toString(year(currentUTC())), '.csv'))],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     header: (['url']),",
						"     mapColumn(",
						"          url,",
						"          clicks,",
						"          position,",
						"          title",
						"     ),",
						"     partitionBy('hash', 1)) ~> saveCurrentMonthAggByPage"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessRedirectClicks')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Utbildnigar_Redirects",
								"type": "DatasetReference"
							},
							"name": "CSVUtbildningar"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "DataLake",
								"type": "LinkedServiceReference"
							},
							"name": "SinkToCSV"
						}
					],
					"transformations": [
						{
							"name": "AggredateByCourseNameAndCountClicks"
						},
						{
							"name": "FilterReaktionsUIDs",
							"description": "Remove Lukasz and Frida uids"
						},
						{
							"name": "SortByCountDescening"
						}
					],
					"scriptLines": [
						"parameters{",
						"     filename1 as string",
						"}",
						"source(output(",
						"          uid as integer,",
						"          uuid as string,",
						"          ip as string,",
						"          web_client as string,",
						"          domain_id as short,",
						"          url_without_params as string,",
						"          url as string,",
						"          redirect_id as short,",
						"          redirect_name as string,",
						"          referrer_url as string,",
						"          {createdAt_$date} as long,",
						"          {updatedAt_$date} as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CSVUtbildningar",
						"FilterReaktionsUIDs aggregate(groupBy(redirect_name),",
						"     clicks = count(redirect_name),",
						"     partitionBy('hash', 1)) ~> AggredateByCourseNameAndCountClicks",
						"CSVUtbildningar filter(!in([1118405, 50884],uid),",
						"     partitionBy('hash', 1)) ~> FilterReaktionsUIDs",
						"AggredateByCourseNameAndCountClicks sort(desc(clicks, true),",
						"     partitionBy('hash', 1)) ~> SortByCountDescening",
						"SortByCountDescening sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'tracking',",
						"     folderPath: 'redirects',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($filename1)],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkToCSV"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SortAndAnalyzeTrend')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Wines"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "DataLake",
								"type": "LinkedServiceReference"
							},
							"name": "TrendCSVFile"
						},
						{
							"dataset": {
								"referenceName": "SystembolagetStores",
								"type": "DatasetReference"
							},
							"name": "SystembolagetStores"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "DataLake",
								"type": "LinkedServiceReference"
							},
							"name": "Sink",
							"rejectedDataLinkedService": {
								"referenceName": "DataLake",
								"type": "LinkedServiceReference"
							}
						},
						{
							"linkedService": {
								"referenceName": "DataLake",
								"type": "LinkedServiceReference"
							},
							"name": "sink13333"
						}
					],
					"transformations": [
						{
							"name": "SortTrends"
						},
						{
							"name": "JoinStoresWithSortedTrends"
						},
						{
							"name": "RemoveSomeField"
						},
						{
							"name": "SortFromWorseTrendToBest"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "cast1"
						},
						{
							"name": "sort2"
						}
					],
					"scriptLines": [
						"parameters{",
						"     item as string ('Dopff'),",
						"     workspace as string ('validwines')",
						"}",
						"source(output(",
						"          ID as short,",
						"          Wine as string,",
						"          Trend as double '000,000,000.000',",
						"          Diff_4_weeks as double '000,000,000.000',",
						"          Median as double '000,000,000.000',",
						"          Variance as double '000,000,000.000'",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: ($workspace),",
						"     folderPath: (concat(\"trends/\", $item)),",
						"     fileName: (concat($item, \"-\", toString(currentDate(\"yyyy-mm-dd\")), \".csv\")),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionBy('hash', 1)) ~> TrendCSVFile",
						"source(output(",
						"          ID as short,",
						"          Butiksnamn as string,",
						"          Adress as string,",
						"          Postnummer as string,",
						"          Ort as string,",
						"          Lat as double,",
						"          Lng as double,",
						"          Range as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SystembolagetStores",
						"derivedColumn3 sort(asc(Trend, true),",
						"     partitionBy('hash', 1)) ~> SortTrends",
						"SortTrends, SystembolagetStores join(TrendCSVFile@ID == SystembolagetStores@ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> JoinStoresWithSortedTrends",
						"JoinStoresWithSortedTrends select(mapColumn(",
						"          ID = TrendCSVFile@ID,",
						"          Wine,",
						"          Trend,",
						"          Diff_4_weeks,",
						"          Median,",
						"          Butiksnamn,",
						"          Adress,",
						"          Postnummer,",
						"          Ort,",
						"          Lat,",
						"          Lng,",
						"          Range",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveSomeField",
						"RemoveSomeField sort(asc(Diff_4_weeks, true),",
						"     partitionBy('hash', 1)) ~> SortFromWorseTrendToBest",
						"SortFromWorseTrendToBest derive(TrendFactor = toFloat(Diff_4_weeks)*toFloat(Trend),",
						"     partitionBy('hash', 1)) ~> derivedColumn1",
						"derivedColumn1 sort(desc(TrendFactor, true),",
						"     partitionBy('hash', 1)) ~> sort1",
						"sort1 derive(current_date = currentDate(),",
						"          trendString = toString(TrendFactor),",
						"     partitionBy('hash', 1)) ~> derivedColumn2",
						"derivedColumn2 keyGenerate(output(newID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"TrendCSVFile derive(TrendFactor = toFloat(Trend)*toFloat(Diff_4_weeks)) ~> derivedColumn3",
						"sort2 cast(output(",
						"          ID as string,",
						"          Wine as string,",
						"          Trend as string,",
						"          Diff_4_weeks as string,",
						"          Median as string,",
						"          Variance as string,",
						"          TrendFactor as string",
						"     ),",
						"     errors: false) ~> cast1",
						"derivedColumn3 sort(asc(TrendFactor, true),",
						"     partitionBy('hash', 1)) ~> sort2",
						"sort1 sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          ID as short,",
						"          Wine as string,",
						"          Trend as string,",
						"          Diff_4_weeks as string,",
						"          Median as string,",
						"          Butiksnamn as string,",
						"          Adress as string,",
						"          Postnummer as string,",
						"          Ort as string,",
						"          Lat as double,",
						"          Lng as double,",
						"          Range as string,",
						"          factor as string",
						"     ),",
						"     format: 'delimited',",
						"     fileSystem: 'validwines',",
						"     folderPath: 'reports',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['report.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     quoteAll: true,",
						"     mapColumn(",
						"          ID,",
						"          Wine,",
						"          Butiksnamn,",
						"          Adress,",
						"          Postnummer,",
						"          Ort,",
						"          Lat,",
						"          Lng,",
						"          Range,",
						"          factor = TrendFactor",
						"     ),",
						"     partitionBy('hash', 1)) ~> Sink",
						"cast1 sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          ID as short,",
						"          Wine as string,",
						"          Butiksnamn as string,",
						"          Adress as string,",
						"          Postnummer as string,",
						"          Ort as string,",
						"          Lat as double,",
						"          Lng as double,",
						"          Range as short,",
						"          factor as double",
						"     ),",
						"     format: 'delimited',",
						"     fileSystem: 'validwines',",
						"     folderPath: 'reports',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:['report1.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     partitionBy('hash', 1)) ~> sink13333"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SortAndAnalyzeTrend_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Wines"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "DataLake",
								"type": "LinkedServiceReference"
							},
							"name": "TrendCSVFile"
						},
						{
							"dataset": {
								"referenceName": "SystembolagetStores",
								"type": "DatasetReference"
							},
							"name": "SystembolagetStore"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "DataLake",
								"type": "LinkedServiceReference"
							},
							"name": "SaveToCSV"
						},
						{
							"linkedService": {
								"referenceName": "DataLake",
								"type": "LinkedServiceReference"
							},
							"name": "SaveSegments"
						}
					],
					"transformations": [
						{
							"name": "CastEverythingToString"
						},
						{
							"name": "CountTrendXDiff"
						},
						{
							"name": "SortByCountFactor"
						},
						{
							"name": "JoinWithSystembolaget"
						},
						{
							"name": "RemoveDoubleIDs"
						},
						{
							"name": "RemoveDoubles"
						},
						{
							"name": "OnlyNegativeTrendsAndDiff"
						},
						{
							"name": "SortByCountDesc"
						},
						{
							"name": "AggByAVG"
						},
						{
							"name": "rank1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     item as string ('Dopff'),",
						"     workspace as string ('validwines')",
						"}",
						"source(output(",
						"          ID as short,",
						"          Wine as string,",
						"          Trend as double,",
						"          Diff_4_weeks as double,",
						"          Median as double,",
						"          Variance as double,",
						"          Segment as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: ($workspace),",
						"     folderPath: (concat(\"trends/\", $item)),",
						"     fileName: (concat($item, \"-\", toString(currentDate(\"yyyy-mm-dd\")), \".csv\")),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionBy('hash', 1)) ~> TrendCSVFile",
						"source(output(",
						"          ID as short,",
						"          Butiksnamn as string,",
						"          Adress as string,",
						"          Postnummer as string,",
						"          Ort as string,",
						"          Lat as double,",
						"          Lng as double,",
						"          Range as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> SystembolagetStore",
						"SortByCountFactor cast(output(",
						"          ID as string,",
						"          Wine as string,",
						"          Trend as string,",
						"          Diff_4_weeks as string,",
						"          Median as string,",
						"          Variance as string,",
						"          countFactor as string",
						"     ),",
						"     errors: false) ~> CastEverythingToString",
						"OnlyNegativeTrendsAndDiff derive(countFactor = round(Trend*Diff_4_weeks,2,2),",
						"     partitionBy('hash', 1)) ~> CountTrendXDiff",
						"CountTrendXDiff sort(desc(countFactor, true),",
						"     partitionBy('hash', 1)) ~> SortByCountFactor",
						"TrendCSVFile, SystembolagetStore join(TrendCSVFile@ID == SystembolagetStore@ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> JoinWithSystembolaget",
						"JoinWithSystembolaget select(mapColumn(",
						"          ID = TrendCSVFile@ID,",
						"          Wine,",
						"          Trend,",
						"          Diff_4_weeks,",
						"          Median,",
						"          Variance,",
						"          Segment,",
						"          Butiksnamn,",
						"          Adress,",
						"          Postnummer,",
						"          Ort,",
						"          Lat,",
						"          Lng,",
						"          Range",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveDoubleIDs",
						"CastEverythingToString aggregate(groupBy(ID),",
						"     each(match(name!='ID'), $$ = first($$)),",
						"     partitionBy('hash', 1)) ~> RemoveDoubles",
						"RemoveDoubleIDs filter(Trend < 0 && Diff_4_weeks < 0) ~> OnlyNegativeTrendsAndDiff",
						"RemoveDoubles sort(desc(countFactor, true),",
						"     partitionBy('hash', 1)) ~> SortByCountDesc",
						"RemoveDoubleIDs aggregate(groupBy(Segment),",
						"     average = round(avg(Median),2,2),",
						"          no_of_stores = count(Segment),",
						"     partitionBy('hash', 1)) ~> AggByAVG",
						"AggByAVG rank(desc(average, true),",
						"     output(rank as long),",
						"     dense: true,",
						"     partitionBy('hash', 1)) ~> rank1",
						"SortByCountDesc sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: ($workspace),",
						"     folderPath: (concat(\"reports/\", $item)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:[(concat($item, \"-\", toString(currentDate(\"yyyy-mm-dd\")), \".csv\"))],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SaveToCSV",
						"rank1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as string,",
						"          Wine as string,",
						"          Trend as double,",
						"          Diff_4_weeks as double,",
						"          Median as double,",
						"          Variance as double,",
						"          Segment as string,",
						"          Butiksnamn as string,",
						"          Adress as string,",
						"          Postnummer as string,",
						"          Ort as string,",
						"          Lat as double,",
						"          Lng as double,",
						"          Range as double,",
						"          countFactor as double",
						"     ),",
						"     format: 'delimited',",
						"     fileSystem: ($workspace),",
						"     folderPath: (concat(\"reports/\", $item)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:[(concat($item, \"-segments-\", toString(currentDate(\"yyyy-mm-dd\")), \".csv\"))],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SaveSegments"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SystembolagetAdresses')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SystembolagetStores",
								"type": "DatasetReference"
							},
							"name": "SystembolagetAdresses"
						},
						{
							"linkedService": {
								"referenceName": "DataLake",
								"type": "LinkedServiceReference"
							},
							"name": "WineCalculations"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "DataLake",
								"type": "LinkedServiceReference"
							},
							"name": "SinkToCSV"
						}
					],
					"transformations": [
						{
							"name": "GetIDofShopFromStoreColumn"
						},
						{
							"name": "JoinWineWithSystembolagetAdresses"
						},
						{
							"name": "SortOnWeight"
						},
						{
							"name": "SelectColumnsWeNeed"
						}
					],
					"scriptLines": [
						"parameters{",
						"     item as string ('CSM_Chardonnay_75cl'),",
						"     workspace as string ('validwines')",
						"}",
						"source(output(",
						"          ID as string,",
						"          Butiksnamn as string,",
						"          Adress as string,",
						"          Postnummer as string,",
						"          Ort as string,",
						"          Lat as string,",
						"          Lng as string,",
						"          Range as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SystembolagetAdresses",
						"source(output(",
						"          Store as string,",
						"          {Store group} as string,",
						"          Profile as string,",
						"          Shop_Segment_Diff as double,",
						"          Trend as double,",
						"          Precent_of_whole_volume as double,",
						"          Weight as double",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'validwines',",
						"     folderPath: 'reports/latest',",
						"     fileName: (concat($item, '.csv')),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> WineCalculations",
						"WineCalculations derive(ID = regexExtract(Store, '(\\\\d+)')) ~> GetIDofShopFromStoreColumn",
						"SystembolagetAdresses, GetIDofShopFromStoreColumn join(SystembolagetAdresses@ID == GetIDofShopFromStoreColumn@ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> JoinWineWithSystembolagetAdresses",
						"JoinWineWithSystembolagetAdresses sort(asc(Weight, true),",
						"     partitionBy('hash', 1)) ~> SortOnWeight",
						"SortOnWeight select(mapColumn(",
						"          Butiksnamn,",
						"          Adress,",
						"          Postnummer,",
						"          Ort,",
						"          Lat,",
						"          Lng,",
						"          Range,",
						"          Store,",
						"          {Store group},",
						"          Profile,",
						"          Shop_Segment_Diff,",
						"          Trend,",
						"          Precent_of_whole_volume,",
						"          Weight",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumnsWeNeed",
						"SelectColumnsWeNeed sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'validwines',",
						"     folderPath: 'reports/latest',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[(concat($item, 'full', '.csv'))],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     partitionBy('hash', 1)) ~> SinkToCSV"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BCF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataFromBCF",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"batchSize": 100,
								"filter": {
									"value": "{ \n    domain_id: @{pipeline().parameters.domain_id}\n    createdAt : { $gte : ISODate('@{pipeline().parameters.startDate}') }\n}",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": "charma.csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['tags'][0]"
										},
										"sink": {
											"type": "String",
											"ordinal": 1
										}
									},
									{
										"source": {
											"path": "$['categories'][0]"
										},
										"sink": {
											"type": "String",
											"ordinal": 2
										}
									},
									{
										"source": {
											"path": "$['createdAt']['$date']"
										},
										"sink": {
											"type": "Int64",
											"ordinal": 3
										}
									},
									{
										"source": {
											"path": "$['updatedAt']['$date']"
										},
										"sink": {
											"type": "Int64",
											"ordinal": 4
										}
									},
									{
										"source": {
											"path": "$['uid']"
										},
										"sink": {
											"type": "Int32",
											"ordinal": 5
										}
									},
									{
										"source": {
											"path": "$['url']"
										},
										"sink": {
											"type": "String",
											"ordinal": 6
										}
									},
									{
										"source": {
											"path": "$['domain_id']"
										},
										"sink": {
											"type": "Int16",
											"ordinal": 7
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "Mongo_Tracking_Trackings",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "EDR_CSV_Source",
								"type": "DatasetReference",
								"parameters": {
									"project_folder": "bcf/sources",
									"source_file": "bcf.csv"
								}
							}
						]
					},
					{
						"name": "BCF",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "CopyDataFromBCF",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EDR_BasicFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"getDataFromCSVSource": {
										"project_folder": "bcf",
										"source_file": "sources/bcf.csv"
									},
									"saveToRedirectsCSV": {
										"dest_path": "bcf/stats"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"startDate": {
						"type": "string",
						"defaultValue": "2022-11-09"
					},
					"domain_id": {
						"type": "string",
						"defaultValue": "51"
					},
					"project_name": {
						"type": "string",
						"defaultValue": "bcf"
					},
					"dest_path": {
						"type": "string",
						"defaultValue": "bcf/stats"
					}
				},
				"folder": {
					"name": "EDR"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-09T15:33:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/EDR_BasicFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BCF_stats')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CP_SimpleTracking_For_BCF",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"batchSize": 100,
								"filter": {
									"value": "{ domain : \"barncancerfonden.se\" ,\ncreatedAt: { $gte : ISODate(\"@{pipeline().parameters.startDate}\") } }",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['uuid']"
										},
										"sink": {
											"type": "String",
											"ordinal": 1
										}
									},
									{
										"source": {
											"path": "$['uid']"
										},
										"sink": {
											"type": "Int32",
											"ordinal": 2
										}
									},
									{
										"source": {
											"path": "$['url']"
										},
										"sink": {
											"type": "String",
											"ordinal": 3
										}
									},
									{
										"source": {
											"path": "$['referrer_url']"
										},
										"sink": {
											"type": "String",
											"ordinal": 4
										}
									},
									{
										"source": {
											"path": "$['page_title']"
										},
										"sink": {
											"type": "String",
											"ordinal": 5
										}
									},
									{
										"source": {
											"path": "$['domain']"
										},
										"sink": {
											"type": "String",
											"ordinal": 6
										}
									},
									{
										"source": {
											"path": "$['createdAt']['$date']"
										},
										"sink": {
											"type": "Int64",
											"ordinal": 7
										}
									},
									{
										"source": {
											"path": "$['updatedAt']['$date']"
										},
										"sink": {
											"type": "Int64",
											"ordinal": 8
										}
									}
								],
								"collectionReference": ""
							}
						},
						"inputs": [
							{
								"referenceName": "Mongo_TrackingSimpleTracking",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CSV_BCF_uid",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "DF_BCF_Pixel",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "CP_SimpleTracking_For_BCF",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_BCF_uid",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BCFCopiedData": {},
									"Emails": {},
									"aggVisitsByPageTitle": {},
									"toCSV": {},
									"sink2": {},
									"sink3": {},
									"sink4": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"startDate": {
						"type": "string",
						"defaultValue": "2022-10-25"
					}
				},
				"folder": {
					"name": "BCF"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-27T13:27:47Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Charma')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataFromCharma",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"batchSize": 100,
								"filter": {
									"value": "{ \n    domain_id: @{pipeline().parameters.domain_id}\n    createdAt : { $gte : ISODate('@{pipeline().parameters.startDate}') }\n}",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": "charma.csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['tags'][0]"
										},
										"sink": {
											"type": "String",
											"ordinal": 1
										}
									},
									{
										"source": {
											"path": "$['categories'][0]"
										},
										"sink": {
											"type": "String",
											"ordinal": 2
										}
									},
									{
										"source": {
											"path": "$['createdAt']['$date']"
										},
										"sink": {
											"type": "Int64",
											"ordinal": 3
										}
									},
									{
										"source": {
											"path": "$['updatedAt']['$date']"
										},
										"sink": {
											"type": "Int64",
											"ordinal": 4
										}
									},
									{
										"source": {
											"path": "$['uid']"
										},
										"sink": {
											"type": "Int32",
											"ordinal": 5
										}
									},
									{
										"source": {
											"path": "$['url']"
										},
										"sink": {
											"type": "String",
											"ordinal": 6
										}
									},
									{
										"source": {
											"path": "$['domain_id']"
										},
										"sink": {
											"type": "Int16",
											"ordinal": 7
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "Mongo_Tracking_Trackings",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "EDR_CSV_Source",
								"type": "DatasetReference",
								"parameters": {
									"project_folder": "charma/sources",
									"source_file": "charma.csv"
								}
							}
						]
					},
					{
						"name": "Charma",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "CopyDataFromCharma",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EDR_BasicFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"getDataFromCSVSource": {
										"project_folder": "charma/sources",
										"source_file": "charma.csv"
									},
									"saveToRedirectsCSV": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"startDate": {
						"type": "string",
						"defaultValue": "2022-11-09"
					},
					"domain_id": {
						"type": "string",
						"defaultValue": "107"
					},
					"project_name": {
						"type": "string",
						"defaultValue": "charma"
					},
					"dest_path": {
						"type": "string",
						"defaultValue": "charma/stats"
					}
				},
				"folder": {
					"name": "EDR"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-09T15:33:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/EDR_BasicFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CharmaCRM_Redirects')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_Redirects_From_MongoDB",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"batchSize": 100,
								"filter": {
									"value": "{   domain_id : @{pipeline().parameters.domain_id}, \n    createdAt : {\n        $gte : ISODate('@{formatDateTime(addDays(utcNow(), \n                        pipeline().parameters.days), 'yyyy-MM-dd')}'),\n        $lt : ISODate('@{formatDateTime(utcNow(),'yyyy-MM-dd')}') \n    }\n}",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['tags'][0]"
										},
										"sink": {
											"name": "items",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['category']"
										},
										"sink": {
											"name": "category",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['uid']"
										},
										"sink": {
											"name": "uid",
											"type": "Int64"
										}
									},
									{
										"source": {
											"path": "$['uuid']"
										},
										"sink": {
											"name": "uuid",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['ip']"
										},
										"sink": {
											"name": "ip",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['domain_id']"
										},
										"sink": {
											"name": "domain_id",
											"type": "Int16"
										}
									},
									{
										"source": {
											"path": "$['url']"
										},
										"sink": {
											"name": "url",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['redirect_name']"
										},
										"sink": {
											"name": "redirect_name",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['referrer_url']"
										},
										"sink": {
											"name": "referrer_url",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['createdAt']['$date']"
										},
										"sink": {
											"name": "createdAt_$date",
											"type": "Int64"
										}
									},
									{
										"source": {
											"path": "$['updatedAt']['$date']"
										},
										"sink": {
											"name": "updatedAt_$date",
											"type": "Int64"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "Mongo_TrackingRedirects",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CSV_Redirects_Raw_Mongo_Data",
								"type": "DatasetReference",
								"parameters": {
									"site": {
										"value": "@pipeline().parameters.site",
										"type": "Expression"
									},
									"datatype": {
										"value": "@pipeline().parameters.datatype",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Process_Redirects_For_CRM",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy_Redirects_From_MongoDB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataflowForCRM_Trackings1",
								"type": "DataFlowReference",
								"parameters": {
									"did": {
										"value": "'@{pipeline().parameters.domain_id}'",
										"type": "Expression"
									},
									"sitename": {
										"value": "'@{pipeline().parameters.site}'",
										"type": "Expression"
									},
									"datatype": "\"redirects\""
								},
								"datasetParameters": {
									"CharmaRawDataCSV": {
										"datatype": {
											"value": "@pipeline().parameters.datatype",
											"type": "Expression"
										},
										"site": {
											"value": "@pipeline().parameters.site",
											"type": "Expression"
										}
									},
									"CharmaDataToImport": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"domain_id": {
						"type": "int",
						"defaultValue": 107
					},
					"days": {
						"type": "int",
						"defaultValue": -1
					},
					"site": {
						"type": "string",
						"defaultValue": "charma"
					},
					"datatype": {
						"type": "string",
						"defaultValue": "redirects"
					}
				},
				"folder": {
					"name": "CRM/Charma"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DataflowForCRM_Trackings1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CharmaCRM_Trackings')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_tracking_data_from_MongoDB",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"batchSize": 100,
								"filter": {
									"value": "{   domain_id : @{pipeline().parameters.domain_id}, \n    createdAt : {\n        $gte : ISODate('@{formatDateTime(addDays(utcNow(), \n                        pipeline().parameters.days), 'yyyy-MM-dd')}'),\n        $lt : ISODate('@{formatDateTime(utcNow(),'yyyy-MM-dd')}') \n    }\n}",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['createdAt']['$date']"
										},
										"sink": {
											"name": "createdAt",
											"type": "Int64"
										}
									},
									{
										"source": {
											"path": "$['updatedAt']['$date']"
										},
										"sink": {
											"name": "updatedAt",
											"type": "Int64"
										}
									},
									{
										"source": {
											"path": "$['uid']"
										},
										"sink": {
											"name": "uid",
											"type": "Int64"
										}
									},
									{
										"source": {
											"path": "$['url']"
										},
										"sink": {
											"name": "url",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['client']"
										},
										"sink": {
											"name": "client",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['domain_id']"
										},
										"sink": {
											"name": "domain_id",
											"type": "Int16"
										}
									},
									{
										"source": {
											"path": "$['referrer_url']"
										},
										"sink": {
											"name": "referrer_url",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['url_without_params']"
										},
										"sink": {
											"name": "url_without_params",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "Mongo_Tracking_Trackings",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CharmaCRMRawData",
								"type": "DatasetReference",
								"parameters": {
									"datatype": "trackings",
									"site": "charma"
								}
							}
						]
					},
					{
						"name": "ProcessTrackingsForCRM",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy_tracking_data_from_MongoDB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataflowForCRM_Trackings",
								"type": "DataFlowReference",
								"parameters": {
									"did": {
										"value": "'@{pipeline().parameters.domain_id}'",
										"type": "Expression"
									},
									"sitename": {
										"value": "'@{pipeline().parameters.site}'",
										"type": "Expression"
									},
									"datatype": {
										"value": "'@{pipeline().parameters.datatype}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"GetTrackingRawData": {
										"datatype": {
											"value": "@pipeline().parameters.datatype",
											"type": "Expression"
										},
										"site": {
											"value": "@pipeline().parameters.site",
											"type": "Expression"
										}
									},
									"SaveForCRMPage": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"domain_id": {
						"type": "int",
						"defaultValue": 107
					},
					"days": {
						"type": "int",
						"defaultValue": -99
					},
					"site": {
						"type": "string",
						"defaultValue": "charma"
					},
					"datatype": {
						"type": "string",
						"defaultValue": "trackings"
					}
				},
				"folder": {
					"name": "CRM/Charma"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DataflowForCRM_Trackings')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CommonStats')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "HRNytt_Banners",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "HRNytt_Banners",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BannersClicks": {},
									"source1": {},
									"saveCurrentMonthStats": {},
									"sink1": {},
									"saveCurrentMonthAggByPage": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"monthAgo": {
						"type": "int",
						"defaultValue": -30
					},
					"yearAgo": {
						"type": "int",
						"defaultValue": -365
					},
					"monthsAgo_3": {
						"type": "string",
						"defaultValue": "-90"
					},
					"monthsAgo_6": {
						"type": "string",
						"defaultValue": "-180"
					}
				},
				"folder": {
					"name": "HRNytt"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-08T15:00:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/HRNytt_Banners')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Mind')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataFromMind",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"batchSize": 100,
								"filter": {
									"value": "{ \n    domain_id: @{pipeline().parameters.domain_id}\n    createdAt : { $gte : ISODate('@{pipeline().parameters.startDate}') }\n}",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": "charma.csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['tags'][0]"
										},
										"sink": {
											"type": "String",
											"ordinal": 1
										}
									},
									{
										"source": {
											"path": "$['categories'][0]"
										},
										"sink": {
											"type": "String",
											"ordinal": 2
										}
									},
									{
										"source": {
											"path": "$['createdAt']['$date']"
										},
										"sink": {
											"type": "Int64",
											"ordinal": 3
										}
									},
									{
										"source": {
											"path": "$['updatedAt']['$date']"
										},
										"sink": {
											"type": "Int64",
											"ordinal": 4
										}
									},
									{
										"source": {
											"path": "$['uid']"
										},
										"sink": {
											"type": "Int32",
											"ordinal": 5
										}
									},
									{
										"source": {
											"path": "$['url']"
										},
										"sink": {
											"type": "String",
											"ordinal": 6
										}
									},
									{
										"source": {
											"path": "$['domain_id']"
										},
										"sink": {
											"type": "Int16",
											"ordinal": 7
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "Mongo_Tracking_Trackings",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "EDR_CSV_Source",
								"type": "DatasetReference",
								"parameters": {
									"project_folder": "mind/sources",
									"source_file": "mind.csv"
								}
							}
						]
					},
					{
						"name": "Mind",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "CopyDataFromMind",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EDR_BasicFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"getDataFromCSVSource": {
										"project_folder": "mind",
										"source_file": "sources/mind.csv"
									},
									"saveToRedirectsCSV": {
										"dest_path": "mind/stats"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"startDate": {
						"type": "string",
						"defaultValue": "2022-11-09"
					},
					"domain_id": {
						"type": "string",
						"defaultValue": "109"
					},
					"project_name": {
						"type": "string",
						"defaultValue": "mind"
					},
					"dest_path": {
						"type": "string",
						"defaultValue": "mind/stats"
					}
				},
				"folder": {
					"name": "EDR"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-09T15:33:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/EDR_BasicFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessTrackingsForCRM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataFromMongoDB",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"batchSize": 100,
								"filter": {
									"value": "{   domain_id : @{pipeline().parameters.domain_id}, \n    createdAt : {\n        $gte : ISODate('@{addDays(utcNow(), \n                        pipeline().parameters.days)}') \n    }\n}",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['createdAt']['$date']"
										},
										"sink": {
											"name": "createdAt",
											"type": "Int64"
										}
									},
									{
										"source": {
											"path": "$['updatedAt']['$date']"
										},
										"sink": {
											"name": "updatedAt",
											"type": "Int64"
										}
									},
									{
										"source": {
											"path": "$['uid']"
										},
										"sink": {
											"name": "uid",
											"type": "Int64"
										}
									},
									{
										"source": {
											"path": "$['url']"
										},
										"sink": {
											"name": "url",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['client']"
										},
										"sink": {
											"name": "client",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['domain_id']"
										},
										"sink": {
											"name": "domain_id",
											"type": "Int16"
										}
									},
									{
										"source": {
											"path": "$['referrer_url']"
										},
										"sink": {
											"name": "referrer_url",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['url_without_params']"
										},
										"sink": {
											"name": "url_without_params",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "Mongo_Tracking_Trackings",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Trackings",
								"type": "DatasetReference",
								"parameters": {
									"site": {
										"value": "@pipeline().parameters.site",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "ProcessTrackingsForCRM",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "CopyDataFromMongoDB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataflowForCRM_Trackings",
								"type": "DataFlowReference",
								"parameters": {
									"did": {
										"value": "'@{pipeline().parameters.domain_id}'",
										"type": "Expression"
									},
									"sitename": {
										"value": "'@{pipeline().parameters.site}'",
										"type": "Expression"
									},
									"datatype": "\"trackings\""
								},
								"datasetParameters": {
									"GetTrackingRawData": {
										"datatype": {
											"value": "@pipeline().parameters.datatype",
											"type": "Expression"
										},
										"site": {
											"value": "@pipeline().parameters.site",
											"type": "Expression"
										}
									},
									"SaveForCRMPage": {}
								},
								"linkedServiceParameters": {}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"domain_id": {
						"type": "int",
						"defaultValue": 8
					},
					"days": {
						"type": "int",
						"defaultValue": -2
					},
					"site": {
						"type": "string",
						"defaultValue": "reaktion"
					},
					"datatype": {
						"type": "string",
						"defaultValue": "tracking"
					}
				},
				"folder": {
					"name": "CRM"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DataflowForCRM_Trackings')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ValidWines_Pipeline_Add_GetMetadata_Flow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Loop_Over_Excel_Files",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "AppendFilesName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('file_items')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "FindTendency",
									"type": "AzureFunctionActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": "calculateTendency",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "{ \"wine_name\" : \"@{item()}\", \"workspace\" : \"@{variables('workspace')}\" }",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "AF_WineSalesTendency",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "DataFlow",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "FindTendency",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "SortAndAnalyzeTrend_copy1",
											"type": "DataFlowReference",
											"parameters": {
												"item": {
													"value": "'@{item()}'",
													"type": "Expression"
												},
												"workspace": {
													"value": "'@{variables('workspace')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"TrendCSVFile": {},
												"SystembolagetStore": {},
												"SaveToCSV": {},
												"SaveSegments": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "CalculateSegments",
									"type": "AzureFunctionActivity",
									"dependsOn": [
										{
											"activity": "DataFlow",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": "calculateSegments",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "{ \"wine_name\" : \"@{item()}\", \"workspace\" : \"@{variables('workspace')}\" }",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "AF_WineSalesTendency",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "SendInfo_Done",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Loop_Over_Excel_Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-25.norwayeast.logic.azure.com:443/workflows/eb9fad300f714438ba3d90a8690d6906/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=i3D5tXJdVl0SOgti5co1YknbPcejP9uVSu9MXMCqTc4",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{  \"ListOfFiles\" : @{variables('file_items')} }",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SendInfo_Error",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Loop_Over_Excel_Files",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "AppendFilesName",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "GetAllSourceFilesInAttachmentsDir",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Validation1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-10.norwayeast.logic.azure.com:443/workflows/6e9518f156e14b30b332b302efc22bd0/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=k9Rye9fCt8qmna6AVgo2av0jKcL-tOuou_vgKMs5KC8",
							"method": "POST",
							"headers": {},
							"body": "Å"
						}
					},
					{
						"name": "GetAllSourceFilesInAttachmentsDir",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetWorkspaceName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AttachemntsWorkspace",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "SetWorkspaceName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Validation1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "workspace",
							"value": "validwines"
						}
					},
					{
						"name": "AppendFilesName",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetAllSourceFilesInAttachmentsDir",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetAllSourceFilesInAttachmentsDir').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "AppendFilename",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "file_items",
										"value": {
											"value": "@split(item().name, '.')[0]",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Validation1",
						"type": "Validation",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SystembolagetStores",
								"type": "DatasetReference",
								"parameters": {}
							},
							"timeout": "0.12:00:00",
							"sleep": 10
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"files": {
						"type": "Array"
					},
					"workspace": {
						"type": "String"
					},
					"file_items": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Wines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SortAndAnalyzeTrend_copy1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Wine_Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Define container name in 'workspace' \nReport is stored in 'reports/latest/{wine_name.csv} ",
				"activities": [
					{
						"name": "Loop_Over_Excel_Files",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "AppendFilesName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [
							{
								"name": "workspace",
								"value": "validwines"
							}
						],
						"typeProperties": {
							"items": {
								"value": "@variables('file_items')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CalculateWeightFactor",
									"type": "AzureFunctionActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": "WineAdsCalculator",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "{ \"wine_name\" : \"@{item()}\", \"workspace\" : \"@{variables('workspace')}\" }",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "AF_WineSalesTendency",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "AddSystembolagetAdresses",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "CalculateWeightFactor",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "SystembolagetAdresses",
											"type": "DataFlowReference",
											"parameters": {
												"item": {
													"value": "'@{item()}'",
													"type": "Expression"
												},
												"workspace": {
													"value": "'@{variables('workspace')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"SystembolagetAdresses": {},
												"WineCalculations": {},
												"SinkToCSV": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					},
					{
						"name": "SendInfo_Done",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Loop_Over_Excel_Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-25.norwayeast.logic.azure.com:443/workflows/eb9fad300f714438ba3d90a8690d6906/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=i3D5tXJdVl0SOgti5co1YknbPcejP9uVSu9MXMCqTc4",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{  \"ListOfFiles\" : @{variables('file_items')} }",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SendInfo_Error",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Loop_Over_Excel_Files",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "AppendFilesName",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "GetAllSourceFilesInAttachmentsDir",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Validation1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-10.norwayeast.logic.azure.com:443/workflows/6e9518f156e14b30b332b302efc22bd0/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=k9Rye9fCt8qmna6AVgo2av0jKcL-tOuou_vgKMs5KC8",
							"method": "POST",
							"headers": {},
							"body": "Å"
						}
					},
					{
						"name": "GetAllSourceFilesInAttachmentsDir",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetWorkspaceName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AttachemntsWorkspace",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "SetWorkspaceName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Validation1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "workspace",
							"value": "validwines"
						}
					},
					{
						"name": "AppendFilesName",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetAllSourceFilesInAttachmentsDir",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetAllSourceFilesInAttachmentsDir').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "AppendFilename",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "file_items",
										"value": {
											"value": "@split(item().name, '.')[0]",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Validation1",
						"type": "Validation",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SystembolagetStores",
								"type": "DatasetReference",
								"parameters": {}
							},
							"timeout": "0.12:00:00",
							"sleep": 10
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"files": {
						"type": "Array"
					},
					"workspace": {
						"type": "String"
					},
					"file_items": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Wines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SystembolagetAdresses')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Wine_Pipeline_No_AZ_function')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Define container name in 'workspace' \nReport is stored in 'reports/latest/{wine_name.csv} ",
				"activities": [
					{
						"name": "Loop_Over_Excel_Files",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "AppendFilesName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [
							{
								"name": "workspace",
								"value": "validwines"
							}
						],
						"typeProperties": {
							"items": {
								"value": "@variables('file_items')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "AddSystembolagetAdresses",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "SystembolagetAdresses",
											"type": "DataFlowReference",
											"parameters": {
												"item": {
													"value": "'@{item()}'",
													"type": "Expression"
												},
												"workspace": {
													"value": "'@{variables('workspace')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"SystembolagetAdresses": {},
												"WineCalculations": {},
												"SinkToCSV": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					},
					{
						"name": "SendInfo_Done",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Loop_Over_Excel_Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-25.norwayeast.logic.azure.com:443/workflows/eb9fad300f714438ba3d90a8690d6906/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=i3D5tXJdVl0SOgti5co1YknbPcejP9uVSu9MXMCqTc4",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{  \"ListOfFiles\" : @{variables('file_items')} }",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SendInfo_Error",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Loop_Over_Excel_Files",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "AppendFilesName",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "GetAllSourceFilesInAttachmentsDir",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Validation1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-10.norwayeast.logic.azure.com:443/workflows/6e9518f156e14b30b332b302efc22bd0/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=k9Rye9fCt8qmna6AVgo2av0jKcL-tOuou_vgKMs5KC8",
							"method": "POST",
							"headers": {},
							"body": "Å"
						}
					},
					{
						"name": "GetAllSourceFilesInAttachmentsDir",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetWorkspaceName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AttachemntsWorkspace",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "SetWorkspaceName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Validation1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "workspace",
							"value": "validwines"
						}
					},
					{
						"name": "AppendFilesName",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetAllSourceFilesInAttachmentsDir",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetAllSourceFilesInAttachmentsDir').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "AppendFilename",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "file_items",
										"value": {
											"value": "@split(item().name, '.')[0]",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Validation1",
						"type": "Validation",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SystembolagetStores",
								"type": "DatasetReference",
								"parameters": {}
							},
							"timeout": "0.12:00:00",
							"sleep": 10
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"files": {
						"type": "Array"
					},
					"workspace": {
						"type": "String"
					},
					"file_items": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Wines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SystembolagetAdresses')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/aggClicksForCoursesRedirects')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataFromRedirects",
						"description": "Copy redirect from courses redirects",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set pattern",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "redirects"
							},
							{
								"name": "Destination",
								"value": "tracking/redirects/courses_rediects.csv"
							}
						],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"batchSize": 100,
								"filter": {
									"value": "{ \n\t\t\"domain_id\": @{variables('domain_id')}, \n\t\t\"url_without_params\" : {\n\t\t\t $regex: \"@{variables('set_pattern')}\" }}\n\n",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['uid']"
										},
										"sink": {
											"name": "uid",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['uuid']"
										},
										"sink": {
											"name": "uuid",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['ip']"
										},
										"sink": {
											"name": "ip",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['web_client']"
										},
										"sink": {
											"name": "web_client",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['domain_id']"
										},
										"sink": {
											"name": "domain_id",
											"type": "Int16"
										}
									},
									{
										"source": {
											"path": "$['url_without_params']"
										},
										"sink": {
											"name": "url_without_params",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['url']"
										},
										"sink": {
											"name": "url",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['redirect_id']"
										},
										"sink": {
											"name": "redirect_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['redirect_name']"
										},
										"sink": {
											"name": "redirect_name",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['referrer_url']"
										},
										"sink": {
											"name": "referrer_url",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['createdAt']['$date']"
										},
										"sink": {
											"name": "createdAt_$date",
											"type": "Int64"
										}
									},
									{
										"source": {
											"path": "$['updatedAt']['$date']"
										},
										"sink": {
											"name": "updatedAt_$date",
											"type": "Int64"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "Mongo_TrackingRedirects",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Utbildnigar_Redirects",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "AggClicksForCourses",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "CopyDataFromRedirects",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ProcessRedirectClicks",
								"type": "DataFlowReference",
								"parameters": {
									"filename1": {
										"value": "'@{variables('filename')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"CSVUtbildningar": {},
									"SinkToCSV": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set pattern",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set domain id",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "set_pattern",
							"value": "/utbildning/redirect/"
						}
					},
					{
						"name": "Set domain id",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set filename",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "domain_id",
							"value": "11"
						}
					},
					{
						"name": "PingLogicApp",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "AggClicksForCourses",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod2-18.swedencentral.logic.azure.com:443/workflows/d1dc9525b458498590d62cdcb61839c0/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=CqkODBsoXEFAEIinCN2FugoMURvgqP-Rz7qsfNc5XvI",
							"method": "POST",
							"headers": {},
							"body": "{ filename : \"\" }"
						}
					},
					{
						"name": "Set filename",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ValidateRedirectsBlobOnStorage",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "filename",
							"value": {
								"value": "@concat('redirects-utbildningar-', utcnow() ,'.csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ValidateRedirectsBlobOnStorage",
						"type": "Validation",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Utbildnigar_Redirects",
								"type": "DatasetReference",
								"parameters": {}
							},
							"timeout": "0.12:00:00",
							"sleep": 10
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"set_pattern": {
						"type": "String"
					},
					"domain_id": {
						"type": "String"
					},
					"filename": {
						"type": "String"
					}
				},
				"folder": {
					"name": "DataFromTracking"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/ProcessRedirectClicks')]"
			]
		}
	]
}